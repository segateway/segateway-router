
# This one lets us jump out if its already present
application segateway-otel-ts[segateway-otel-timestamp] {
    filter {
        "${.otel.log.Timestamp}" ne ""
    };
};

block parser segateway-otel-timestamp-journalctl_realtime_timestamp() {
    channel {
        parser {
            date-parser(
                format(
                        '%s.%f',
                        '%s',
                    )
                template("${.otel.scopeLog.logRecord.body._SOURCE_REALTIME_TIMESTAMP}")
            );
        };    
    };
};
application segateway-otel-timestamp-journalctl_realtime_timestamp[segateway-otel-timestamp] {
    filter {
        "${.otel.scopeLog.logRecord.body._SOURCE_REALTIME_TIMESTAMP}" ne ""
    };
    parser { segateway-otel-timestamp-journalctl_realtime_timestamp(); };
};

block parser segateway-otel-timestamp-k8s_event() {
    channel {
        parser {
            #.jsonLog.Timestamp Mar 04 20:37:53 2020
            date-parser(
                format(
                        '%FT%T.%f%Z',
                        '%FT%T%Z'
                    )
                template("${.otel.scopeLog.logRecord.body.object.eventTime}")
            );
        };  
    };
};
application segateway-otel-timestamp-k8s_event[segateway-otel-timestamp] {
    parser { segateway-otel-timestamp-k8s_event(); };
};

block parser segateway-otel-timestamp-timeunix_parts() {
    channel {
        parser {
            date-parser(
                format(
                        '%s.%f',
                        '%s',
                    )
                template("${.otel.scopeLog.logRecord.timeUnix.millis}.${.otel.scopeLog.logRecord.timeUnix.nanos}")
            );
        };
    };
};
application segateway-otel-timestamp-timeunix_parts[segateway-otel-timestamp] {
    filter {
            "${.otel.scopeLog.logRecord.timeUnix.millis}" ne ""
    }; 
    parser { segateway-otel-timestamp-timeunix_parts(); };
};

# Keep last use observed time
