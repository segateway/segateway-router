source s_otlp {
    channel {
        source {
            opentelemetry(
                port(4317)
            );
        };
        parser {
            opentelemetry();
        };
        # TODO: Make this dynamic to match container name if it could change
        filter {
            "${.otel.resource.attributes.k8s.container.name}" ne "segateway-router"
        };
        if {
            # When event body happens to be json we cal go ahead and extract
            parser {
                json-parser(
                    prefix(".otel.scopeLog.logRecord.attributes.")
                    template("${.otel.log.body}")
                );
            };
            rewrite {
                set('json' value('.otel.com.segway.body.format'));
                set('true' value('.otel.com.segway.body.structured'));
                # unset(value('.otel.log.body'));
                set('t_logscale_otel_body' value('.otel.com.segway.msgtemplate'));
            };
        } elif {
            # When event body happens to be json we cal go ahead and extract
            parser {
                regexp-parser(
                    template("${.otel.log.body}")
                    prefix(".tmp.")
                    patterns(
                        '^(?<header>.+)(?<data>{.*})$'
                    )
                );
                json-parser(
                    prefix(".otel.scopeLog.logRecord.attributes.")
                    template("${.tmp.data}")
                );
            };
            rewrite {
                set('msg_json' value('.otel.com.segway.body.format'));
                set('true' value('.otel.com.segway.body.structured'));
                unset(value('.tmp.data'));
                rename(".tmp.header" ".otel.scopeLog.logRecord.attributes.body.header");
                set('t_logscale_otel_head_tail' value('.otel.com.segway.msgtemplate'));
            };            
        # Parse embeded kv with space seperators
        } elif {
            # When event body happens to be json we cal go ahead and extract
            parser {
                regexp-parser(
                    template("${.otel.log.body}")
                    prefix(".tmp.")
                    patterns(
                        '^(?<header>.+?) *?(?<data>(?:[a-zA-Z0-9\-\_]+=(?:"[^"]+"|[^ ]+)\s?)+.*)'
                    )
                );
                kv-parser(
                    prefix(".otel.scopeLog.logRecord.attributes.")
                    template("${.tmp.data}")
                    extract-stray-words-into("tail")
                );
            };
            rewrite {
                set('msg_kv' value('.otel.com.segway.body.format'));
                set('true' value('.otel.com.segway.body.structured'));
                unset(value('.tmp.data'));
                rename(".tmp.header" ".otel.scopeLog.logRecord.attributes.body.header");                
                rename(".tmp.tail" ".otel.scopeLog.logRecord.attributes.body.tail");                
                set('t_logscale_otel_head_tail' value('.otel.com.segway.msgtemplate'));
                set('.otel.scopeLog.logRecord.attributes.body.header' value('.otel.com.segway.msgfield'));
            };            
        # This else keeps us from dropping an event that just has a message
        } else {
            rewrite {
                set('msg' value('.otel.com.segway.body.format'));
                set('false' value('.otel.com.segway.body.structured'));
            };            
        };
        # Sometimes we see this field set incorrectly go ahead and drop it
        if {
            filter {
                "${.otel.scopeLog.logRecord.timeUnix.millis}" eq "0"
            };
            rewrite {
                unset(value('.otel.scopeLog.logRecord.timeUnix.millis'));
                unset(value('.otel.scopeLog.logRecord.timeUnix.nanos'));
            };
        };
        if {
            filter {
                "${.otel.scopeLog.logRecord.observedTimeUnix.millis}" ne ""
                and "${.otel.scopeLog.logRecord.observedTimeUnix.millis}" ne "0"
            };
            rewrite {
                set('${.otel.scopeLog.logRecord.observedTimeUnix.millis}.${.otel.scopeLog.logRecord.observedTimeUnix.nanos}', value('.otel.log.ObservedTimestamp'));
                unset(value('.otel.scopeLog.logRecord.observedTimeUnix.millis'));
                unset(value('.otel.scopeLog.logRecord.observedTimeUnix.nanos'));
            };
        };
        # TODO: Save the recv time so we can track time in process by step        
        if {
            filter {
                "${.otel.log.ObservedTimestamp}" ne ""
            };
            parser {
                date-parser(
                    format(
                            '%s.%f',
                            '%s',
                        )
                    time-stamp(recvd)
                    template("${.otel.scopeLog.logRecord.body._SOURCE_REALTIME_TIMESTAMP}")
                );
            };
            
        };
        if {
            filter {
                "${.otel.log.Timestamp}" eq ""
            };
            if {
                filter {
                    "${.otel.scopeLog.logRecord.body._SOURCE_REALTIME_TIMESTAMP}" ne ""
                };
                parser {
                    date-parser(
                        format(
                                '%s.%f',
                                '%s',
                            )
                        template("${.otel.scopeLog.logRecord.body._SOURCE_REALTIME_TIMESTAMP}")
                    );
                };
            } else if {
                parser {
                    #.jsonLog.Timestamp Mar 04 20:37:53 2020
                    date-parser(
                        format(
                                '%FT%T.%f%Z',
                                '%FT%T%Z'
                            )
                        template("${.otel.scopeLog.logRecord.body.object.eventTime}")
                    );
                };
            } else if {
                parser {
                    filter {
                        "${.otel.scopeLog.logRecord.timeUnix.millis}" ne ""
                    };
                    date-parser(
                        format(
                                '%s.%f',
                                '%s',
                            )
                        template("${.otel.scopeLog.logRecord.timeUnix.millis}.${.otel.scopeLog.logRecord.timeUnix.nanos}")
                    );
                };
            } else if {
                parser {
                    filter {
                        "${.otel.log.ObservedTimestamp}" ne ""
                    };
                    date-parser(
                        format(
                                '%FT%T.%f%Z',
                                '%FT%T%Z'
                            )
                        template("${.otel.log.ObservedTimestamp}")
                    );
                };
            } else {};
        } else {};
    };

};
#EOF