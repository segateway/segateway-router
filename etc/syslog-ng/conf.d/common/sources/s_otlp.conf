source s_otlp {
    channel {
        source {
            opentelemetry(
                port(4317)
            );
        };
        parser {
            opentelemetry();
        };
        if {
           filter {
                "${.otel.resource.attributes.k8s.container.name}" ne "segateway-router"
           };
        };
        if {
            # When event body happens to be json we cal go ahead and extract
            parser {
                json-parser(
                    prefix(".otel.scopeLog.logRecord.attributes.")
                    template("${.otel.log.body}")
                );
            };
            rewrite {
                set('json' value('.otel.scopeLog.logRecord.attributes.body.format'));
                set('true' value('.otel.scopeLog.logRecord.attributes.body.structured'));
                unset(value('.otel.log.body'));
            };
        } elif {
            # When event body happens to be json we cal go ahead and extract
            parser {
                regexp-parser(
                    template("${.otel.log.body}")
                    prefix(".tmp.")
                    patterns(
                        '^(?<header>.+)(?<data>{.*})$'
                    )
                );
                json-parser(
                    prefix(".otel.scopeLog.logRecord.attributes.")
                    template("${.tmp.data}")
                );
            };
            rewrite {
                set('msg_json' value('.otel.scopeLog.logRecord.attributes.body.format'));
                set('true' value('.otel.scopeLog.logRecord.attributes.body.structured'));
                unset(value('.tmp.data'));
                rename(".tmp.header" ".otel.scopeLog.logRecord.attributes.body.header");                
            };            
        # Parse embeded kv with space seperators
        } elif {
            # When event body happens to be json we cal go ahead and extract
            parser {
                regexp-parser(
                    template("${.otel.log.body}")
                    prefix(".tmp.")
                    patterns(
                        '^(?<header>.+?) *?(?<data>(?:[a-zA-Z0-9\-\_]+=(?:"[^"]+"|[^ ]+)\s?)+.*)'
                    )
                );
                kv-parser(
                    prefix(".otel.scopeLog.logRecord.attributes.")
                    template("${.tmp.data}")
                    extract-stray-words-into("tail")
                );
            };
            rewrite {
                set('msg_kv' value('.otel.scopeLog.logRecord.attributes.body.format'));
                set('true' value('.otel.scopeLog.logRecord.attributes.body.structured'));
                unset(value('.tmp.data'));
                rename(".tmp.header" ".otel.scopeLog.logRecord.attributes.body.header");                
                rename(".tmp.tail" ".otel.scopeLog.logRecord.attributes.body.tail");                
            };            
        # This else keeps us from dropping an event that just has a message
        } else {
            rewrite {
                set('msg' value('.otel.scopeLog.logRecord.attributes.body.format'));
                set('false' value('.otel.scopeLog.logRecord.attributes.body.structured'));
            };            
        };
    };

};
#EOF