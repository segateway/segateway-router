source s_otlp {
    channel {
        source {
            opentelemetry(
                port(4317)
            );
        };
        parser {
            opentelemetry();
        };
        # TODO: Make this dynamic to match container name if it could change
        filter {
            "${.otel.resource.attributes.k8s.container.name}" ne "segateway-router"
        };

        # Basic cleanup and parsing of body
        if {
            parser(segateway-otel-body);
        } else {
            rewrite {
                set('msg' value('.otel.com.segway.body.format'));
                set('false' value('.otel.com.segway.body.structured'));
            };            
        };
        # We need to handle observed TS first as we may need to set the stamp if nothing better is found
        if {
            parser(segateway-otel-ts-observed);
        };
        # TODO: Save the recv time so we can track time in process by step        
        if {
            filter {
                "${.otel.log.ObservedTimestamp}" ne ""
            };
            parser {
                date-parser(
                    format(
                            '%s.%f',
                            '%s',
                        )
                    time-stamp(recvd)
                    template("${.otel.scopeLog.logRecord.body._SOURCE_REALTIME_TIMESTAMP}")
                );
            };            
        };

        # Sometimes we see this field set incorrectly go ahead and drop it
        if {
            filter {
                "${.otel.scopeLog.logRecord.timeUnix.millis}" eq "0"
            };
            rewrite {
                unset(value('.otel.scopeLog.logRecord.timeUnix.millis'));
                unset(value('.otel.scopeLog.logRecord.timeUnix.nanos'));
            };
        };
        
        if {
            parser(segateway-otel-ts-observed);
        } elif {
            filter {
                    "${.otel.log.ObservedTimestamp}" ne ""
            };                    
            parser {
                date-parser(
                    format(
                            '%FT%T.%f%Z',
                            '%FT%T%Z'
                        )
                    template("${.otel.log.ObservedTimestamp}")
                );
            };
        } else {};
    };

};
#EOF